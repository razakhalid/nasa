{"ast":null,"code":"const API_URL = 'http://localhost:8000';\n\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json(); // Load planets and return as JSON.\n}\n\nasync function httpGetLaunches() {\n  const response = await fetch(`${API_URL}/launches`);\n  const launches = await response.json();\n  return launches.sort((a, b) => a.flightNumber - b.flightNumber); // Load launches, sort by flight number, and return as JSON.\n}\n\nasync function httpSubmitLaunch(launch) {// TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {// TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"sources":["/Users/razakhalid/Downloads/dev-practice/nasa/client/src/hooks/requests.js"],"names":["API_URL","httpGetPlanets","response","fetch","json","httpGetLaunches","launches","sort","a","b","flightNumber","httpSubmitLaunch","launch","httpAbortLaunch","id"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAhB;;AACA,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAAZ,CAA5B;AACA,SAAO,MAAME,QAAQ,CAACE,IAAT,EAAb,CAF8B,CAG9B;AACD;;AAED,eAAeC,eAAf,GAAiC;AAC/B,QAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,CAA5B;AACA,QAAMM,QAAQ,GAAI,MAAMJ,QAAQ,CAACE,IAAT,EAAxB;AACA,SAAOE,QAAQ,CAACC,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAA3C,CAAP,CAH+B,CAI/B;AACD;;AAED,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC,CACtC;AACA;AACD;;AAED,eAAeC,eAAf,CAA+BC,EAA/B,EAAmC,CACjC;AACA;AACD;;AAED,SACEb,cADF,EAEEI,eAFF,EAGEM,gBAHF,EAIEE,eAJF","sourcesContent":["const API_URL = 'http://localhost:8000';\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n  // Load planets and return as JSON.\n}\n\nasync function httpGetLaunches() {\n  const response = await fetch(`${API_URL}/launches`);\n  const launches =  await response.json();\n  return launches.sort((a, b) => a.flightNumber - b.flightNumber)\n  // Load launches, sort by flight number, and return as JSON.\n}\n\nasync function httpSubmitLaunch(launch) {\n  // TODO: Once API is ready.\n  // Submit given launch data to launch system.\n}\n\nasync function httpAbortLaunch(id) {\n  // TODO: Once API is ready.\n  // Delete launch with given ID.\n}\n\nexport {\n  httpGetPlanets,\n  httpGetLaunches,\n  httpSubmitLaunch,\n  httpAbortLaunch,\n};"]},"metadata":{},"sourceType":"module"}